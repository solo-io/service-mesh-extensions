// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/kustomize/loader (interfaces: Loader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helmchart "github.com/solo-io/go-utils/installutils/helmchart"
	v1 "github.com/solo-io/service-mesh-hub/api/v1"
)

// MockLoader is a mock of Loader interface
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoadBase mocks base method
func (m *MockLoader) LoadBase(arg0 helmchart.Manifests, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBase indicates an expected call of LoadBase
func (mr *MockLoaderMockRecorder) LoadBase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBase", reflect.TypeOf((*MockLoader)(nil).LoadBase), arg0, arg1)
}

// RetrieveLayers mocks base method
func (m *MockLoader) RetrieveLayers(arg0 string, arg1 *v1.Kustomize) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveLayers", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLayers indicates an expected call of RetrieveLayers
func (mr *MockLoaderMockRecorder) RetrieveLayers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLayers", reflect.TypeOf((*MockLoader)(nil).RetrieveLayers), arg0, arg1)
}
